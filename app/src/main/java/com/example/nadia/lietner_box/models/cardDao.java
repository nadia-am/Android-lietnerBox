package com.example.nadia.lietner_box.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.nadia.lietner_box.models.card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class cardDao extends AbstractDao<card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardCel = new Property(1, Integer.class, "cardCel", false, "CARD_CEL");
        public final static Property GroupId = new Property(2, Long.class, "groupId", false, "GROUP_ID");
        public final static Property Question = new Property(3, String.class, "question", false, "QUESTION");
        public final static Property Answer = new Property(4, String.class, "answer", false, "ANSWER");
        public final static Property LDate = new Property(5, java.util.Date.class, "LDate", false, "LDATE");
    };


    public cardDao(DaoConfig config) {
        super(config);
    }
    
    public cardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CARD_CEL\" INTEGER," + // 1: cardCel
                "\"GROUP_ID\" INTEGER," + // 2: groupId
                "\"QUESTION\" TEXT," + // 3: question
                "\"ANSWER\" TEXT," + // 4: answer
                "\"LDATE\" INTEGER);"); // 5: LDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cardCel = entity.getCardCel();
        if (cardCel != null) {
            stmt.bindLong(2, cardCel);
        }
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(3, groupId);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(4, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(5, answer);
        }
 
        java.util.Date LDate = entity.getLDate();
        if (LDate != null) {
            stmt.bindLong(6, LDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public card readEntity(Cursor cursor, int offset) {
        card entity = new card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cardCel
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // question
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // answer
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // LDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardCel(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnswer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

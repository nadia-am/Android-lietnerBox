package com.example.nadia.lietner_box.models;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.example.nadia.lietner_box.models.groupDao;
import com.example.nadia.lietner_box.models.cardDao;
import com.example.nadia.lietner_box.models.settingDao;
import com.example.nadia.lietner_box.models.purchaseDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 8): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 8;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        groupDao.createTable(db, ifNotExists);
        cardDao.createTable(db, ifNotExists);
        settingDao.createTable(db, ifNotExists);
        purchaseDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        groupDao.dropTable(db, ifExists);
        cardDao.dropTable(db, ifExists);
        settingDao.dropTable(db, ifExists);
        purchaseDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            if (oldVersion!=newVersion) {
                /*alter table*/
                db.execSQL("ALTER TABLE \"GROUP\" ADD COLUMN \"TYPE\" text;");
                db.execSQL("ALTER TABLE \"GROUP\" ADD COLUMN \"PARENT_ID\" INTEGER;");
                //get all table column
//                Cursor c = db.rawQuery("SELECT sql FROM sqlite_master WHERE type = 'table' AND tbl_name = 'GROUP';", null);
//                if (c.moveToFirst()) {
//                    while ( !c.isAfterLast() ) {
//                        Log.i("@@@","Table => "+c.getString(0));
//                        c.moveToNext();
//                    }}
                /*update table*/
                db.execSQL("UPDATE \"GROUP\" SET TYPE = \"group\";");
                db.execSQL("UPDATE \"GROUP\" SET PARENT_ID = -1;");
//                Cursor c2 = db.rawQuery("SELECT * FROM  \"GROUP\";", null);
//                c2.moveToFirst();
//                String id = c2.getString(0);
//                String grpName = c2.getString(1);
//                String date = c2.getString(2);
//                String type = c2.getString(3);
//                String parentId = c2.getString(4);
//                Log.i("@@@",type+"    "+parentId);
//                Log.i("","");
            }
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(groupDao.class);
        registerDaoClass(cardDao.class);
        registerDaoClass(settingDao.class);
        registerDaoClass(purchaseDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
